{"version":3,"file":"static/js/813.6902ba1b.chunk.js","mappings":"sJAGA,MAAMA,EAAkBC,IAA4C,IAA3C,IAAEC,EAAG,SAAEC,EAAW,IAAI,OAAEC,EAAS,IAAIH,EAC5D,MAAOI,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAC7BC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,GAAgBC,EAAAA,EAAAA,cAAY,KAChC,IAAIC,EAAiB,KACrB,MAAMC,EAAQC,IACPF,IAAgBA,EAAiBE,GACtC,MAAMC,EAAWC,KAAKC,KAAKH,EAAYF,GAAkBT,EAAU,GAEnEG,EAASU,KAAKE,MAAMH,EAAWb,IAE3Ba,EAAW,GACbI,OAAOC,sBAAsBP,EAC/B,EAGFM,OAAOC,sBAAsBP,EAAK,GACjC,CAACV,EAAUD,IAmBd,OAjBAmB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAW,IAAIC,sBAClBC,IACKA,EAAQ,GAAGC,gBACbf,GACF,GAEF,CAAEgB,UAAW,KAOf,OAJIlB,EAASmB,SACXL,EAASM,QAAQpB,EAASmB,SAGrB,IAAML,EAASO,YAAY,GACjC,CAACnB,KAEGoB,EAAAA,EAAAA,MAAA,QAAMC,IAAKvB,EAASwB,SAAA,CAAE3B,EAAOD,IAAc,EA6BpD,EA1Be6B,KAEXH,EAAAA,EAAAA,MAAA,OAAKI,UAAU,sFAAqFF,SAAA,EAClGF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBF,SAAA,EAChCG,EAAAA,EAAAA,KAAA,MAAID,UAAU,KAAIF,UAACG,EAAAA,EAAAA,KAACnC,EAAe,CAACE,IAAK,IAAKE,OAAO,SACrD+B,EAAAA,EAAAA,KAAA,QAAMD,UAAU,OAAMF,SAAC,kBAGzBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBF,SAAA,EAChCG,EAAAA,EAAAA,KAAA,MAAID,UAAU,KAAIF,UAACG,EAAAA,EAAAA,KAACnC,EAAe,CAACE,IAAK,IAAKE,OAAO,SACrD+B,EAAAA,EAAAA,KAAA,QAAMD,UAAU,OAAMF,SAAC,sBAGzBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBF,SAAA,EAChCG,EAAAA,EAAAA,KAAA,MAAID,UAAU,KAAIF,UAACG,EAAAA,EAAAA,KAACnC,EAAe,CAACE,IAAK,GAAIE,OAAO,SACpD+B,EAAAA,EAAAA,KAAA,QAAMD,UAAU,OAAMF,SAAC,eAGzBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBF,SAAA,EAChCG,EAAAA,EAAAA,KAAA,MAAID,UAAU,KAAIF,UAACG,EAAAA,EAAAA,KAACnC,EAAe,CAACE,IAAK,EAAGE,OAAO,SACnD+B,EAAAA,EAAAA,KAAA,QAAMD,UAAU,OAAMF,SAAC,qB","sources":["component/rating/rating.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './rating.css';\n\nconst AnimatedCounter = ({ end, duration = 2000, suffix = '' }) => {\n  const [count, setCount] = useState(0);\n  const countRef = useRef(null);\n\n  const startCounting = useCallback(() => {\n    let startTimestamp = null;\n    const step = (timestamp) => {\n      if (!startTimestamp) startTimestamp = timestamp;\n      const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n\n      setCount(Math.floor(progress * end));\n\n      if (progress < 1) {\n        window.requestAnimationFrame(step);\n      }\n    };\n\n    window.requestAnimationFrame(step);\n  }, [duration, end]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting) {\n          startCounting();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (countRef.current) {\n      observer.observe(countRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [startCounting]);\n\n  return <span ref={countRef}>{count}{suffix}</span>;\n};\n\nconst Rating = () => {\n  return (\n    <div className='text-content content-5 d-flex justify-content-around px-4 align-items-center m-auto'>\n      <div className='rating animate-in'>\n        <h1 className='h1'><AnimatedCounter end={600} suffix=\"+\" /></h1>\n        <span className='span'>Employees</span>\n      </div>\n\n      <div className='rating animate-in'>\n        <h1 className='h1'><AnimatedCounter end={530} suffix=\"+\" /></h1>\n        <span className='span'>Happy Clients</span>\n      </div>\n\n      <div className='rating animate-in'>\n        <h1 className='h1'><AnimatedCounter end={10} suffix=\"+\" /></h1>\n        <span className='span'>Awards</span>\n      </div>\n\n      <div className='rating animate-in'>\n        <h1 className='h1'><AnimatedCounter end={5} suffix=\"*\" /></h1>\n        <span className='span'>Star Rating</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Rating;\n"],"names":["AnimatedCounter","_ref","end","duration","suffix","count","setCount","useState","countRef","useRef","startCounting","useCallback","startTimestamp","step","timestamp","progress","Math","min","floor","window","requestAnimationFrame","useEffect","observer","IntersectionObserver","entries","isIntersecting","threshold","current","observe","disconnect","_jsxs","ref","children","Rating","className","_jsx"],"sourceRoot":""}