{"ast":null,"code":"// src/App.js\nimport{Suspense,useEffect}from'react';import{RouterProvider,createBrowserRouter,createRoutesFromElements,Route}from\"react-router-dom\";import Navbar from'./component/navbar/navbar';import{routesConfig}from'./route';import'./App.css';// Optimized loader component with loading states\nimport{jsx as _jsx}from\"react/jsx-runtime\";const PageLoader=()=>/*#__PURE__*/_jsx(\"div\",{className:\"page-loader\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loader-content\",children:\"Loading...\"})});// Implement intersection observer for route prefetching\nconst usePrefetchRoutes=()=>{useEffect(()=>{const observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(entry.isIntersecting){const path=entry.target.getAttribute('href');const route=routesConfig.find(r=>r.path===(path===null||path===void 0?void 0:path.replace('/','')));if(route!==null&&route!==void 0&&route.preload){route.preload();}}});},{rootMargin:'50px'});document.querySelectorAll('a[href^=\"/\"]').forEach(link=>{observer.observe(link);});return()=>observer.disconnect();},[]);};function App(){usePrefetchRoutes();const router=createBrowserRouter(createRoutesFromElements(/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Navbar,{}),children:routesConfig.map(_ref=>{let{path,element:Element}=_ref;return/*#__PURE__*/_jsx(Route,{path:path==='/'?undefined:path,index:path==='/',element:/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(PageLoader,{}),children:/*#__PURE__*/_jsx(Element,{})})},path);})})));return/*#__PURE__*/_jsx(RouterProvider,{router:router});}export default App;","map":{"version":3,"names":["Suspense","useEffect","RouterProvider","createBrowserRouter","createRoutesFromElements","Route","Navbar","routesConfig","jsx","_jsx","PageLoader","className","role","children","usePrefetchRoutes","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","path","target","getAttribute","route","find","r","replace","preload","rootMargin","document","querySelectorAll","link","observe","disconnect","App","router","element","map","_ref","Element","undefined","index","fallback"],"sources":["/Users/touchbar/Documents/GitHub/oilrefinery/src/App.js"],"sourcesContent":["\n// src/App.js\nimport { Suspense, useEffect } from 'react';\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route } from \"react-router-dom\";\nimport Navbar from './component/navbar/navbar';\nimport { routesConfig } from './route';\nimport './App.css';\n// Optimized loader component with loading states\nconst PageLoader = () => (\n  <div className=\"page-loader\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n    <div className=\"loader-content\">Loading...</div>\n  </div>\n);\n\n// Implement intersection observer for route prefetching\nconst usePrefetchRoutes = () => {\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const path = entry.target.getAttribute('href');\n          const route = routesConfig.find(r => r.path === path?.replace('/', ''));\n          if (route?.preload) {\n            route.preload();\n          }\n        }\n      });\n    }, { rootMargin: '50px' });\n\n    document.querySelectorAll('a[href^=\"/\"]').forEach(link => {\n      observer.observe(link);\n    });\n\n    return () => observer.disconnect();\n  }, []);\n};\n\nfunction App() {\n  usePrefetchRoutes();\n\n  const router = createBrowserRouter(\n    createRoutesFromElements(\n      <Route path=\"/\" element={<Navbar />}>\n        {routesConfig.map(({ path, element: Element }) => (\n          <Route\n            key={path}\n            path={path === '/' ? undefined : path}\n            index={path === '/'}\n            element={\n              <Suspense fallback={<PageLoader />}>\n                <Element />\n              </Suspense>\n            }\n          />\n        ))}\n      </Route>\n    )\n  );\n\n  return <RouterProvider router={router} />;\n}\n\nexport default App;"],"mappings":"AACA;AACA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,cAAc,CAAEC,mBAAmB,CAAEC,wBAAwB,CAAEC,KAAK,KAAQ,kBAAkB,CACvG,MAAO,CAAAC,MAAM,KAAM,2BAA2B,CAC9C,OAASC,YAAY,KAAQ,SAAS,CACtC,MAAO,WAAW,CAClB;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,UAAU,CAAGA,CAAA,gBACjBD,IAAA,QAAKE,SAAS,CAAC,aAAa,CAACC,IAAI,CAAC,aAAa,CAAC,gBAAc,GAAG,CAAC,gBAAc,KAAK,CAAAC,QAAA,cACnFJ,IAAA,QAAKE,SAAS,CAAC,gBAAgB,CAAAE,QAAA,CAAC,YAAU,CAAK,CAAC,CAC7C,CACN,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC9Bb,SAAS,CAAC,IAAM,CACd,KAAM,CAAAc,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CAAEC,OAAO,EAAK,CACrDA,OAAO,CAACC,OAAO,CAACC,KAAK,EAAI,CACvB,GAAIA,KAAK,CAACC,cAAc,CAAE,CACxB,KAAM,CAAAC,IAAI,CAAGF,KAAK,CAACG,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC,CAC9C,KAAM,CAAAC,KAAK,CAAGjB,YAAY,CAACkB,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACL,IAAI,IAAKA,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEM,OAAO,CAAC,GAAG,CAAE,EAAE,CAAC,EAAC,CACvE,GAAIH,KAAK,SAALA,KAAK,WAALA,KAAK,CAAEI,OAAO,CAAE,CAClBJ,KAAK,CAACI,OAAO,CAAC,CAAC,CACjB,CACF,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAAEC,UAAU,CAAE,MAAO,CAAC,CAAC,CAE1BC,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC,CAACb,OAAO,CAACc,IAAI,EAAI,CACxDjB,QAAQ,CAACkB,OAAO,CAACD,IAAI,CAAC,CACxB,CAAC,CAAC,CAEF,MAAO,IAAMjB,QAAQ,CAACmB,UAAU,CAAC,CAAC,CACpC,CAAC,CAAE,EAAE,CAAC,CACR,CAAC,CAED,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACbrB,iBAAiB,CAAC,CAAC,CAEnB,KAAM,CAAAsB,MAAM,CAAGjC,mBAAmB,CAChCC,wBAAwB,cACtBK,IAAA,CAACJ,KAAK,EAACgB,IAAI,CAAC,GAAG,CAACgB,OAAO,cAAE5B,IAAA,CAACH,MAAM,GAAE,CAAE,CAAAO,QAAA,CACjCN,YAAY,CAAC+B,GAAG,CAACC,IAAA,MAAC,CAAElB,IAAI,CAAEgB,OAAO,CAAEG,OAAQ,CAAC,CAAAD,IAAA,oBAC3C9B,IAAA,CAACJ,KAAK,EAEJgB,IAAI,CAAEA,IAAI,GAAK,GAAG,CAAGoB,SAAS,CAAGpB,IAAK,CACtCqB,KAAK,CAAErB,IAAI,GAAK,GAAI,CACpBgB,OAAO,cACL5B,IAAA,CAACT,QAAQ,EAAC2C,QAAQ,cAAElC,IAAA,CAACC,UAAU,GAAE,CAAE,CAAAG,QAAA,cACjCJ,IAAA,CAAC+B,OAAO,GAAE,CAAC,CACH,CACX,EAPInB,IAQN,CAAC,EACH,CAAC,CACG,CACT,CACF,CAAC,CAED,mBAAOZ,IAAA,CAACP,cAAc,EAACkC,MAAM,CAAEA,MAAO,CAAE,CAAC,CAC3C,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}